<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design | Lumi Wu]]></title>
  <link href="http://luminsense.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://luminsense.github.io/"/>
  <updated>2018-07-17T21:58:13+08:00</updated>
  <id>http://luminsense.github.io/</id>
  <author>
    <name><![CDATA[Lumi Wu]]></name>
    <email><![CDATA[wulianglumin@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sense & Sensitivity]]></title>
    <link href="http://luminsense.github.io/blog/sense-and-sensitivity/"/>
    <updated>2016-09-28T04:15:00+08:00</updated>
    <id>http://luminsense.github.io/blog/sense-and-sensitivity</id>
    <content type="html"><![CDATA[<p>最近受朋友启发，开始读原研哉《请偷走海报》这本书。</p>

<p>其实四年前，我在自学设计的时候已经对这本书翻过几页了。但当时的我并不认为这是什么好书。因为我是以一种比较功利的心态去读的，心想能否从中得到一些诸如设计理论或原则之类的东西。于是翻开书之后，我只能得到很强烈的坑爹感：这不就是很多篇博客吗？不不不，说博客都有点正式了，这简直就是一些记录生活琐事的随笔嘛！<!--more--></p>

<p>对于当时只想读到一些诸如「好的设计需要有可见性」这种皮毛信息的我，对这本书当然是不以为然的。以至于毕业之后再辗转好几个城市，我都找不到这本书了，只好再去买了一本。</p>

<p>随着时间流逝，内心中的失落感觉慢慢浮现了出来。我现在的忙碌程度远非昔日可比，但同时也感到生活粗糙了起来。一个最明显的感受是：对舒适度和细节的挑剔程度，甚至都没有几年前高了。</p>

<p>比如去年我在北京的时候，连书架这种东西，也只是去淘宝买了件100元都不到的货。当时心想：「好东西等有自己屋子了再说吧。用一用就丢弃的东西，何必在乎这么多细节呢？」</p>

<p>这种想法多起来后，结果就是对自己的感官知觉慢慢变得不那么在乎，钝感越来越强而挑剔的态度却减弱了很多。再往后的结果，便是无力对周围那些有美感的事物产生反应了，每天深陷于忙碌和对经济实用的追求中。可能作为一个「产品经理」这无可厚非，但这样的状态已经没法被称为一个「设计师」了。其实过去的我在这方面的感知也实在稀薄得可怜，只是被一些自大的情绪掩盖罢了。</p>

<p>所以最近再读这本书，算是唤起了我的某种感知，即使是那些记录着琐事的文字，也让我觉得感动。连设计大赛后握手告别这种小事情，也能写两个自然段，还能发掘出某人「玩世不恭和感官疲劳的奇妙的连带感」这样的感觉（《外籍评委的心得》）。这实在让我觉得，自己过得真是太不认真了。</p>

<p>恰巧，我最近也在思考什么是创意的本源、什么是「sense」的本源。</p>

<p>我已经初步得到了一些结论，例如一个对某种领域更能产生创意的人，一定是深度使用过这个领域几乎所有产品，体验过几乎所有该领域能产生的场景之人，这样的人才能迅速的捕捉到体验之间的细微差别，得到一些外行人通过理论分析永远无法得出的见解。</p>

<p>这样的理论在某些专业领域完全适用。例如一个天天使用钢笔的人，肯定比那些从不写字的人更清楚握感、笔触、纸张甚至颜色对其体验的影响。</p>

<p>读着读着这些随笔我才发现：原来生活本身就是一个「专业领域」啊！很多人可能觉得，没有工作、没有学习的生活只不过是浪费时间。但我现在觉得这样的想法真可谓是大错特错！</p>

<p>想象一下，如果你生活中的所有时间都用于探讨一个主题（比如：股票投资），那么你对其他事情可能就不敏感了。有没有可能，一个股票交易员，突然设计出某种新款的鞋，然后风靡全球呢？其实完全是有可能的，但前提是这个交易员在某个早晨或午后，漫无目的地把玩研究关于鞋子的事情，而此时的脑子里也许压根就没有股票交易这回事。</p>

<p>那么这个交易员为什么会突然关注起鞋子的事呢？那必然是因为他对生活中的其他事情也持有一种敏感和挑剔的态度（比如鞋子让自己的脚不舒服了），而不单单只对他的股票交易如此。</p>

<p><strong>所以我觉得「sense」的基础便是「敏感」加上「对感官和精神享受的尊重」。</strong>听起来有点政治不正确：我们不是应该艰苦朴素吗？然而现在大家几乎不会有物资短缺的问题了，新的问题反而在于过剩。看看世界上有多少产品经理在「挖掘需求」就知道了。如果你对一百年前的人提到「挖掘需求」，可能他会觉得是天方夜谭：需求还需要挖掘？我连温饱都没有满足呐！</p>

<p>感官和精神上的敏感就会产生<strong>「欲望」</strong>。如果你不断地向别人描述这种欲望，让大家都觉得自己要满足了这个欲望才能更好的生活下去，那么恭喜你，你创造了一个<strong>「需求」</strong>。就像夏天离开了空调就没法活一样。就像乔布斯当年发布 iPhone 一样。所谓「消费升级」，本质也不过如此。</p>

<p>而缺乏敏感的生活，则像是老家的牙刷：永远都只有1元一支的牙刷，大家都觉得牙刷就应该这么便宜，因为脑海里没有对于牙刷的多余的需求。如果你拿出一支100元的电动牙刷（对于电动牙刷而言是非常便宜了），大家反倒觉得你奢侈且矫情。但体验过电动牙刷的你，事实上已经回不去1元牙刷的日子了，因为你已经敏感了，你已经完成了欲望的教育。</p>

<p>有一个矛盾的点在于：<strong>人人都在功利的寻找「sense」，然而真正的「sense」却是无功利的，甚至是反功利的（或者说，奢侈的）。</strong></p>

<p>这也解释了为什么大部分成功的设计师、科学家和艺术家，都有着相对富裕的经济基础。</p>

<p>因为只有他们，能做到在某个午后，躺在湖边无目的地欣赏风景。这也并不是毫无意义的。从某种角度上来说，这也是「创造价值」的一种过程。只不过这种价值并无法定量，也无法给人明确的预期罢了。而除此之外的绝大部分人，追寻的确实是可定量、有明确预期的东西，那就是月薪。</p>

<p>所以我们在发财的过程中也不要忘记培养欲望。因为只有自身有了更高阶的欲望，才有资格创造更高阶的价值：美感、真理、人类福祉和诸如此类的种种。</p>

<p>读《请偷走海报》这本书，让我觉得生活还是需要仪式感。无论大事还是细节，看来我都还是很有必要体验一次「Sense入门」的。这就是为什么我突发奇想，在这个长假一个人飞去纽约，而在临走前3天都还没确定行程的原因吧。</p>

<p>Lumi, 3:56 a.m</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这样就好]]></title>
    <link href="http://luminsense.github.io/blog/its-just-fine/"/>
    <updated>2016-04-13T02:30:00+08:00</updated>
    <id>http://luminsense.github.io/blog/its-just-fine</id>
    <content type="html"><![CDATA[<p>今天突然发现，不知不觉中，我的独立博客已建成快三年了。在这三年中，她的设计，除了一些 typography 上的微调外，完全没有任何改动。</p>

<p>最重要的是，我还是如此喜欢这样的设计，一如三年之前。<!--more--></p>

<p>我是在广州猎德村里的一个五平米小屋子里搭建这个独立博客的。她基于 Octopress 搭建在 Github Pages 上，「lumiwu.com」这个域名很巧没被占用，就买下了。</p>

<p>设计上，采用了很窄的单栏布局，最顶上是我自己拍的猫咪图。导航是极端简单的，只有 BLOG、ARCHIVES 和 ABOUT（以前还有个 DESIGN，链到我的 dribbble）。</p>

<p>Typography 是最精心设计过的。字体选用的是 Avenir Next 和冬青黑体（on Mac of course）。在中西文混排方面，我的博客是完美的。两种字体的字重统一和谐，眯着眼睛看完全融为一块，感觉不到突兀，比简书那种装逼未遂的中西混排好上一万倍。更别提在编辑文章时，严格做到了西文大小写和拼写规范、中西文间空格。段首无缩进，行距段距恰如其分。H2加粗处理但又保持行距不变，在营造节奏感的同时，又避免了纵向结构的割裂。超链接的色彩克制，超越时间迎来了 Normcore 风格。</p>

<p>What&rsquo;s more，她还在2013年初率先支持了 Retina Display。</p>

<p>这样的阅读体验，简直能用高潮来形容。</p>

<p>然而其他人不知道的是，这个设计其实是之前数次失败的产物。在刚开始设计的时候，我参考了很多其他 blog（其中大部分是 WordPress Blog）。这些「竞品」让我产生了一些极具误导性的定势，例如：一个博客需要在文章左侧或右侧的一个 fixed 区域写一段作者介绍，需要有个 fixed 区域进行 categories 以及 tags 的导航，每篇博客末尾都需要有一个「Related Blogs」以及分享到微博、微信、还有当年人人网的按钮。当然，也免不了加上一堆无趣的友情链接。</p>

<p>更有一些个人博客，还会编纂「推荐系列」「热门话题」「随机文章」这些东西，而某个博客在「热门话题」区域下就有——我数了数——60个话题 tag。</p>

<p>实话说我做不好这样的设计。我的想法是宽松、简单、白色。然而上面的每一条「需求」都与这些想法背道而驰。做了几个方案，现在还存在我电脑里，打开看了看，感觉和当年一样：丑陋，令人心烦。</p>

<p>把这些东西都删掉，只留下最纯粹的内容本身，这是一个痛苦的过程。在这个过程中，你会不停在想：真的要删掉这个吗？删掉这个会不会…… 会不会…… 让我的博客看起来不够「丰富」？</p>

<p>是的！只要纠结的痛苦经历了足够多，我发现了其实魔鬼来源于我错误的欲望。是的，加60个 hashtag 云能让我的博客看起来内容丰富，但是内容呢？恐怕我写的时候想的更多会是如何充斥热点话题，如何命中更多关键词吧？</p>

<p>其实本质还是动机问题：是为了建立「业内影响力」？为了在N年后的简历上能拿来做谈资？能让自己以这为资本更好地活跃在圈子里？还是纯粹把在 Evernote 里码好的东西发出来而已？</p>

<p>这个问题就很好回答了。理解自己到了这一层，如何设计也就变成一件存在唯一正确答案的事。于是我把该删的都删了，只保留了内容本身。</p>

<p>用原研哉的话说：「这样就好」。只有这样的设计才能符合我的动机。</p>

<p><strong>更重要的是，这样的设计本身对我产生了一些约束，让我不会走偏。</strong>例如，我发布东西的频次是极端不固定的，整个2015年只写了5篇，而2016年才进行到四月，便有了11篇。这是纯粹的随心情而写，而非作为某种强迫性的任务。此外，我不会追热点，我更倾向输出一些保质的、在几年之后依然有价值的东西。最后，我是纯粹以自己的角度去写，我就是不客观。</p>

<p>可以说，我才是这个设计真正的用户，在克制中，我得到的是满足感。</p>

<p>我根本不在乎这个博客的流量，我只想把更多沉淀下来的内容填充到这个设计里去。如果可以的话，永远不加需求。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test-driven Design]]></title>
    <link href="http://luminsense.github.io/blog/test-driven-design/"/>
    <updated>2015-01-06T19:00:00+08:00</updated>
    <id>http://luminsense.github.io/blog/test-driven-design</id>
    <content type="html"><![CDATA[<p><img src="http://lumiwu.com/assets/images/tdd.png" width="620px" height="300px"/></p>

<h2>不要说「我觉得&hellip;」</h2>

<p>很多设计师习惯用自己的经验和主观感觉去提出方案，但经验和主观感觉很可能是错误的。以用户为中心的设计，需要以用户心理、用户行为相关的客观事实为依据去执行，而非以设计师的「自我参考」去执行。</p>

<p>使用「自我参考」方式的设计师，经常会陷入多个选项的纠结中，这样会浪费大量的时间和精力。若以事实为依据去设计，我们应该收集足够的数据、用研和测试结论，并根据这些事实去进行决策。这么做能够让我们不浪费时间而做出正确的决定。</p>

<p>团队成员对设计的讨论和挑战，通常也是「自我参考」方式的。这个时候如果没有客观事实为依据，设计师很容易陷入被动的状态（这让很多设计师产生了「领地意识」的可笑观念），甚至与团队其他决策产生冲突，影响合作效率。而如果这个设计是依据某个事实结论得出的，那么这些质疑便也不足为惧了，设计师也能更好地与其他人协同工作。</p>

<p>所以，以事实为依据的设计是我们追求的目标。但是在实际执行中，我们会发现<strong>设计师获取事实依据的资源非常有限。</strong>已掌握的数据和信息很多时候并不足以对一个新的需求提供充分的依据，在前期进行严谨的用户研究和测试又会耗费过多的时间。</p>

<p>那么在整个过程中，我们如何高效地收集事实依据呢？</p>

<p>受软件开发中 Test-driven Development 的启发，我想到了一种激进的设计过程，叫做 <strong>Test-driven Design</strong>，可供尝试。<!--more--></p>

<p>在传统的设计方法下，设计师会花很多的时间在自己的方案上。但 Test-driven Design（测试驱动的设计）需要我们<strong>逆转思路，将 90% 精力转到寻求事实依据的过程上，将剩下的 10% 用于快速迭代方案</strong>，做到零纠结、零争论，将时间省下来放到多方案、迭代和验证上。</p>

<h2>用最短的时间做原型</h2>

<p>我们的目标是用尽可能短的时间构建一个最小可用化原型（Minimal Viable Prototype，由精益创业的理念启发），以便在设计验证中使用。千万不要在这个阶段输出完整的、包含所有细节的文档性方案（即使这样看起来会比较「专业」）。</p>

<p>How to do?</p>

<ol>
<li><strong>首先要快。</strong>使用自己最擅长的工具，维护一个高复用性的个人模版库，建立效率最高的 workflow 和工具协作体系，保持设计文件内部的干净和组织性（例如：Visio 的元素分组、PS 和 Sketch 的层次和图层命名），以便后续的快速迭代修改。</li>
<li>遇到自己不能确定的设计点，或者与其他人有不同意见的设计点时，首先寻找是否有已有的数据和事实支持。若没有，则<strong>避免过多讨论，快速输出多个可行方案</strong>，然后准备投放到下一步骤的验证过程中。避免任何双方都无法被说服的争吵，事实依据才是解决一切的钥匙。</li>
<li><strong>站在客观的角度，</strong>避免「自我参考」或者「老板参考」的设计。时刻提醒自己：「我所知道、所观察到的，并不一定是对的」。</li>
<li><strong>避免过度深入地探究未确定的细节。</strong>要记住：现在需要的并不是一个完整的方案文档，而只是一个用于测试和验证的原型。过于精细可能是有害的，这点需要设计师通过主观的判断去平衡。</li>
</ol>


<p>在我的经验中，通常交互设计可以在1-2小时内完成多方案原型的快速构建。对于小规模的需求，这个时间可以被缩短到分钟级别。对于视觉设计，耗费的时间会久一些，但最长不要超过一个工作日。</p>

<p>原型最好是动态的、可操作、高保真的。不过这也视具体的需求而定。</p>

<h2>边做边验证</h2>

<p>设计师需要接触数据、专家和用户，对多方案的质量进行验证和评估。设计验证需要穿插在方案过程中，作为对方案的即时的有力支持。</p>

<p><strong>数据搜寻</strong>是最简单的获取事实依据的方法，能够解决很多纠结点。设计师应有一定的数据分析能力，熟悉自己产品的后台数据系统，并且经常去那里寻找有用的信息。</p>

<p>我们可以使用成本最低的<strong>启发式评估（Heuristic Evaluation）</strong>，通过专家和设计 leader 对方案进行筛选和建议。启发式评估能给设计师一个公开解释和辨析方案的过程，并且能发现一些可能忽略掉的要素。</p>

<p>但启发式评估依然是主观的。在很多时候，我们依然需要客观的用户研究方法。<strong>这些用研方法之所以可行，是因为我们将原来用在纠结方案细节、进行无效讨论的时间节省了下来</strong>。</p>

<ol>
<li>使用快速、低成本、易执行的用研方法，例如用户访谈、原型测试等。</li>
<li>需要以对比的方式去执行用研和测试，不仅可以对比设计师的多个方案，也可以对比竞品。</li>
<li>测试要围绕着有与需求目标紧密相关的针对性指标进行，例如：某个流程耗费的时间、某个分支的短时间PV统计等等。方案在针对性指标的表现能够作为直接的决策依据。</li>
</ol>


<p>在设计验证完成后，利用得到的事实依据修改、精化方案。如果方案内还有分歧点，那么就进行一轮小型迭代，准备下一次的设计验证。每次的设计验证应该越来越轻、越来越快，直到分歧点全部被消灭，我们就得出了理想的方案。这就是 Test-driven 的快速迭代过程。</p>

<p>Test-driven Design 与传统的设计方法不同的地方在于：<strong>方案不再是用研的目的，相反，用研是方案的目的</strong>，就像编程中的 Try &amp; Catch。方案是工具，不是目标。<strong>目标是掌握事实，得到整个需求在用户体验层面的 insight</strong>，方案不过是在这个过程中的附属品。</p>

<h2>长期研究</h2>

<p>既然我们已经把眼界从方案的层面提升到 insight 的层面，那么我们就能看出：设计师的工作并不是一时的内容，而是贯穿在产品生命周期中持续的工作。</p>

<p>那么在设计方案经过开发实现并发布后，我们还能做什么呢？</p>

<ol>
<li>观察数据，看看之前得出的设计方案是否成功？如果没有成功，反思是哪些元素导致的？这些元素是产品上的，市场上的，还是其他方面的？</li>
<li>开始从各种渠道进行<strong>长期用户研究</strong>，如：A/B 测试、数据观察、路径分析、用户反馈、社交媒体舆情等等。</li>
<li><strong>试着发现新的问题！</strong></li>
</ol>


<p>在整个过程中，我们所做事情的核心在于：对产品和用户形成越来越完善的 insight。每一个用研、每一次辨析，都会让我们对产品的 insight 加深一分，都会让我们对需求和方案的把握加强一分。</p>

<h2>总结</h2>

<p>我们发现：<strong>有了足够的事实依据和 insight，方案只是顺其自然的结果！</strong>这就是 Test-driven Design 最强大的一点：这不仅是一种设计方法，而是一套机制，让设计师产生 insight，让解决方案顺其自然出现的机制。所以我们也可以称其为 Insight-driven Design。</p>

<p>这是一个初步的、激进的想法，尚未通过实践验证。但现在的设计师们需要快速对陌生领域建立认识，需要边打边走、边做边学的自我更新和协同心态。传统的、以方案为核心的方法已经不再适用了。而 Test-driven Design，绝对是一种值得尝试的工作方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一封神棍般的回信]]></title>
    <link href="http://luminsense.github.io/blog/a-letter/"/>
    <updated>2014-10-29T20:30:00+08:00</updated>
    <id>http://luminsense.github.io/blog/a-letter</id>
    <content type="html"><![CDATA[<p>这篇是我三个月之前为某位准备做交互设计的同学写的神棍般的回信。今天厚脸皮地放上来，是因为近期自己又对一些问题进行了思索，例如：一个交互设计师可以是一个好的产品经理吗？</p>

<p>于是我感到此信中的一些观点是值得记录下来的。<!--more--><strong>以下是正文：</strong></p>

<p>你好，XXXX：</p>

<p>看了你的问题，我就先来泛泛地谈下交互吧。</p>

<p>交互的确是个要求都很模糊的工作，很多时候让人怀疑：这工作是不是不需要什么专业技能？是不是一个低门槛很好混的工作？</p>

<p>交互的门槛的确非常低，低到了令人发指的地步。首先交互不需要技术，不需要 coding，相比开发来说更具有「设计感」。但论「设计感」，又不足与专攻艺术设计的视觉设计师相提并论，相比他们交互又多了很多的逻辑和理性。入门的交互也很少需要考虑资本、市场层面的因素。从这个角度来看，交互入门的门槛真的非常低，基本是个人、能画线框图、知道目标平台的基本交互控件和模式、读一下例如 iOS HIG 之类的指南文档，就可以来做交互了。</p>

<p>之前做微信支付接入审核，看过很多其他公司交互出的文档，那真是群魔乱舞，令人大开眼界。正常人看了这样的工作成果，可能都会觉得交互设计大概就是拿来卖萌的吧。</p>

<p>但是如果真心想做好交互这件事，那完全就是另一番光景了。</p>

<p>首先，你必须要有美感，必须要对得起「设计」二字，必须了解艺术、平面设计、工业设计等等。<strong>因为人们需要文化，而你做的正是用户体验，是一款工具构建起文化的最重要方式。你的用户将会感受到什么，是由你决定的。</strong>你必须要有品位，知道好坏，有逼格，而且要有引导全人类向更高逼格发展（而不是只有自己在那装逼）的勇气和决心。是的，交互要有逼格，虽然很多人认为交互是不需要逼格的。</p>

<p>必须要懂技术，最好自己就是开发者（虽然有点难）。你必须要知道你所要求的设计是如何被实现的，这会让你更加明确自己在整个项目周期里到底在做什么。开发们不会再欺负你（笑）。很多设计上的实现可能性也不需要咨询别人，自己就能得出结论。</p>

<p><strong>必须把握需求的来源，把自己变成至少 60% 个产品经理。</strong>需求的来源可能是用户，也可能是商业，也可能是政治。交互需要有这样的 whole picture，因为交互不仅是要交付那些图和文档，更重要的是做好产品这整件事（the whole thing）。关于这件事到底是什么，要以怎样的目的达到，自己有哪些资源和瓶颈，交互设计需要有自己的思考和想法。</p>

<p>必须懂心理学和人类学（你的专业是极有优势的），因为人机交互，人在前，机在后。要了解商业、市场、营销、传播学，甚至了解资本。还要了解金融，因为这是等你以后有钱了需要理财的时候，必备的知识。</p>

<p>上面几段总结起来，就是：做牛逼的交互需要全方位的知识，最好是所有知识。</p>

<p>听起来很扯，是吧？一个人怎么可能拥有所有知识呢。但仔细想想，交互不像视觉设计，可以躲在像素背后说：「商业的东西好恶心啊不要玷污设计」；交互不像开发，可以躲在代码背后说：「你们把需求文档写好了给我，时间点再评估」。<strong>交互需要考虑所有因素</strong>（虽然被派出去谈判这种事可能比较少做，那是产品经理的事，但一旦到了某个点，交互和产品的边界就变得相当模糊了）。</p>

<p>说了那么多，好像还没有解决你的问题：「要向哪些方向努力？」但我们已经知道，认为获得某项知识就能做好交互的想法是错误的。</p>

<p><strong>交互的核心在于设计思考（Design Thinking）。</strong>一种思维方式，做好了可以洞察问题的本质，并且调用已知的和未知的知识去解决问题。这个概念很大，也需要时间沉淀，并且不是那么容易表达，已经超出了我能讲的范围了。我能说的仅仅是，在今后的实践中，要意识到：<strong>思考总是最重要的核心，其他事情要么是资源工具，要么是表达手段，它们都没「思考」重要。</strong></p>

<p>以上扯了那么多「虚的」，最后来回答几个实在的问题吧。</p>

<p>「平时做交互是什么样的工作？」</p>

<p>表面上来看，一个需求产生后，首先会跟产品一起琢磨需求。有时候需要用研，通过数据或访谈、测试等，这里不展开讲。然后细化逻辑，制定一个产品方案。接下来就出交互方案（大部分 Design Thinking 的工作就是从一开始到这里，虽然最终的产出物可能比较简单）（工具随便用啥，我主要用 Visio）。在大公司里，方案会收到很多限制，例如一致性、产品惯例、老大口味等等。方案搞定后，会跟设计部门的人和老大评审（考验表达方式的时候来了）。评审通过后会交付开发执行设计。设计师不可能考虑到所有逻辑流程，开发过程中总会遇到问题，这个时候就需要设计师随时盯着，提供支持和替代方案（这个过程叫设计支持）。开发完成 DEMO 后，设计师会去找实现不完全或有误的地方，一般会维护一个 checklist，发现问题后督促开发修改迭代，在发布前完成最终版（这个过程叫设计验收）。发布后，通过数据、用户反馈等渠道收集信息，可能会作为下一轮需求的起点。一个迭代大概就这样，其中有些细节这里就不赘述。</p>

<p>通俗来说，就是：开会、纠结、画图、纠结、开会、催人。</p>

<p>「一些建议？」</p>

<ol>
<li><p>先读一些基础的书吧。《认知与设计》《About Face 3》《设计心理学》我的入门就这三本。</p></li>
<li><p>把学习看做第一重要的事，做一个终身学习者。保持开放的心态看待一切行业和一切人类。</p></li>
<li><p>找机会做实际的商业项目，在实际环境中来做 Design Thinking。脱离实际商业化的一切飞机稿都是垃圾（逛 Dribbble 仅当做发现最近设计趋势的消遣吧，那儿没啥好混的，当然功利性地发发作品也无妨）。当时我做交互的第一个项目，就是一款创业产品（虽然做得超级搓，产品后来也死了）。</p></li>
<li><p>不管是面试还是其他什么别的，考察的重点永远是 Design Thinking。不要太在意工具，当你成为学习者后，学个工具那还叫事儿？</p></li>
<li><p>忽略上面所说的一些，交互门槛真的很低。你所担心的不应该是如何入门，而是如何做得更好。Don&rsquo;t be afraid.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一个 iOS 项目的学习与开发记录]]></title>
    <link href="http://luminsense.github.io/blog/about-my-first-ios-app/"/>
    <updated>2014-09-05T18:45:00+08:00</updated>
    <id>http://luminsense.github.io/blog/about-my-first-ios-app</id>
    <content type="html"><![CDATA[<p>今年七月的时候，心血来潮想自学 iOS 开发，于是翻起了不久前买的 <a href="http://www.amazon.cn/gp/product/0321942051/ref=oh_details_o07_s00_i00?ie=UTF8&amp;psc=1">iOS Programming: The Big Nerd Ranch Guide</a> 一书就这么开始了。到了八月中旬，慢悠悠地看完了这本五百多页的书。几天之后，开始了我的第一个习作 Time Flow 的开发。<!--more--></p>

<p>Time Flow 是个简单的时间记录工具，你可以记录现在正在做的事情，然后这个 App 会自动帮你记录时间。当你做完了这件事情后，在 Time Flow 上完成这件事，它就会被记录在今天的 activity record 中。这是一个非常简单的 App，只用了两个 View Controller，底层数据也非常简单。</p>

<p>除此之外，Time Flow 还有一些有意思的小特性：</p>

<ul>
<li><p>在主界面中，有两层的水波动画（本质是两条正弦曲线），水波的高度表示了现在所处的时间。凌晨时水波在最上方，快到半夜时水波在最下方。在大多数人的工作时间时，水波刚好处在界面中比较好看的位置。这也是应用叫做 Time Flow 的原因。</p></li>
<li><p>你可以通过 Time Flow 使自己专注。若在新建记录时，选择了 Work、Study、Workout、Reading 的类型，那么 Title 会变成「Focus on」。App 还可以根据 iPhone 的充电状态来控制屏幕不会自动变暗，如果你使用 iPhone Dock，插上 iPhone，调出 Time Flow 的主页面，它就能时刻提醒你当前 focus 的事情了。</p></li>
<li><p>Time Flow 会用一个饼状图表现每天的时间记录。但这个饼状图与市面上大多数时间记录 App 所用的饼状图都不太一样。其他的饼状图只显示已经记录的事件的时间分布，而对于那些没有记录的时间，则不会显示。这样的数据可视化并没有什么价值。而 Time Flow 的饼状图会将一天内的所有时间如实显示，也就是一圈刚好是 24 小时，你做的事情放在一天的范畴来看占比几何，一目了然。</p></li>
<li><p>Time Flow 会发送 local notification，以防用户忘记完成时间。但是若你选择了 Sleep 类型，那么这个 notification 会在八小时后出现。</p></li>
</ul>


<h2>开发过程</h2>

<p>Time Flow 的核心功能用十天的业余时间完成。</p>

<p>第一天（周一）构想了这个 App 的主要流程和界面，简单设计了一下交互，简单看了看 App Store 的一些同类型应用。</p>

<p>第二天（周二）设计数据层。本来想用几个类作为事件的容器，通过 Archive 的方式做数据持久化，但这是条弯路。经过同事夏天的指点，选择用 Core Data 作为技术方案。由于不了解 Core Data，当天晚上的时间就在 <a href="http://www.objc.io/">objc.io</a> 上学习 Core Data。</p>

<p>第三天（周三）基于 Core Data 完成数据层，并写了个简单的测试界面，完成了数据层的测试。</p>

<p>第四天（周四）完成了一个数据接口类，封装了 Core Data 的操作，并且实现了业务逻辑，改进测试界面并成功测试了这个接口类。</p>

<p>周五和周六暂停了两天。</p>

<p>第五天（周日）开始写界面，完成了新建事件时，选择类型的控件。这是我完成的第一个自定义控件。</p>

<p>第六天（周一）完成主界面的逻辑。</p>

<p>第七天（周二）利用 <a href="https://github.com/kevinzhow/PNChart">PNChart</a> 开源库实现饼状图展示，写了个简单的将事件转化为时间段的方法，用包含极端情况的数据完成测试。</p>

<p>第八天（周三）利用并修改了 <a href="https://github.com/m1entus/MZDayPicker">MZDayPicker</a> 这个开源的日期选择控件，完成显示记录的 View Controller 基本结构。</p>

<p>第九天（周四）在记录的 View Controller 中添加自定义的 Table View Cell。</p>

<p>第十天（周五）视觉设计，添加各种状态的所有按钮、切图、色彩选择。创建了一个能够很方便修改颜色的工具类。</p>

<p>至此，Time Flow 已经基本成型了。剩下的工作（包括：主界面的动画微调、视觉设计微调、Bug Fix、屏幕亮度判断逻辑、Local Notification 逻辑和其他各种小改动）在后面两周边偷懒边完成了。</p>

<p>8月26日，成功加入 iPhone 开发者计划（期间还跟美国苹果通了个电话，解决了 Apple ID 资料乱码问题）。</p>

<p>到9月3日为止，搞定了各种证书、支付设置、App ID 等所有你能想到的任何跟提交相关的问题。在这之后一天，也就是9月4日，Time Flow 提交到 App Store 等待审核，定价 0.99 美元（也就是6元人民币）。</p>

<h2>心得</h2>

<p>最初开始学习的原因，主要考虑两点：一是苹果新出了 Swift，本来以为可以用这个全新的语言开发，而不用管 Objective-C 的奇怪语法了；二是 iWatch 要出了，如果能率先做 iWatch 的开发者那也是极好的。</p>

<p>结果，Swift 在我看了官方文档后就再也没碰过了，反而熟悉了 Objective-C 并且一直用 Objc 完成了开发。而对于 iWatch，这个产品短期来看貌似不开放 SDK。哈哈。</p>

<p>不过虽说如此，收获也是挺多的。</p>

<p><strong>进一步理解 iOS Design</strong></p>

<p>举个最基本的例子：我所见过的很多设计师都将 push/pop 动画，和 modal view 的 present 动画（通常为从下往上弹出）单纯地理解为两种不同的页面切换动画。然而，若是从代码层面来看，这两件事情是完全不同的：Push/pop 动画是基于 Navigation Controller 的，换句话说就是为导航而生的切换方式；而 present/dismiss 的意义只是显示一个暂时的页面，而其与 presentingViewController 的关系也显示出了其在页面层级中的定位。</p>

<p>知道这个有什么意义呢？我的答案是，理解整个 iOS 系统从设计之初的意图。上面说的设个区别，从设计师的角度来看也许是奇怪的，但是再以苹果的角度仔细想想，其实是非常合理的。从技术层面了解 Push/pop 和 present/dismiss，更能够体会 iOS 的意图，并且在今后的设计中更加合理地利用这两种 View Controller 切换方式。</p>

<p>通过研究 iOS 中各种控件和内容视图的 API，可以更好地理解这些控件，并且能够发现很多在平时设计中忽略的细节和特性。</p>

<p>再举个例子：Table View 有 Grouped 和 Plained 两种 Style，而这两种 Style 在设计上的区别是什么？虽然我之前在实际设计上都用对了，但并没有明显地提出或意识到这两种 Style 在设计上的区别，也没用对这两种 Style 提出更加通用化的设计场景和规则定义（在微信 Webview 交互设计指南中有撰写相关部分，感兴趣可以去查看）。这些都算是新发现。</p>

<p><strong>理解实现方法</strong></p>

<p>在 iOS 中写动画是有趣的，也是复杂的。虽然 Time Flow 中只使用了最基本的 UIView Animation，但至少也知道了 Core Animation、View Controller Transition、UIKit Dynamics 等多种实现动画的工具和方法。对于一个效果需要用多少成本实现、通过什么技术手段实现，也略知一二了。其实自己对后面三种动画兴趣很大，说不定会做些什么奇怪的东西自己玩呢。</p>

<p>除了动画之外，其他方面的实现方法和成本，我也都有一个浅显的印象了。</p>

<p><strong>好多第一次</strong></p>

<ul>
<li>第一次用 MVC 设计模式开发，对 MVC 有了更好的理解，并且接触了 MVVM 的概念；</li>
<li>第一次使用 Core Data；</li>
<li>第一次大量读代码，帮我使用的开源库 Debug，基于视觉设计修改了开源库的展示层代码；</li>
<li>第一次大量读技术文档，越读越爽，读出了快感；</li>
<li>第一次写界面和动画；</li>
<li>第一次提交应用到 App Store。</li>
</ul>


<p><strong>终于搵返哩种感觉</strong></p>

<p>自从办公室搬到了 T.I.T 创意园，就好久没有体验心流状态了。因为这个办公空间实在太大、太开放了，以至于在任何时刻都非常吵闹，并且经常有人就在你旁边讨论，然后拉上你去开会。</p>

<p>这次的开发过程，我躲在家里的白色书桌上，找回了久违的心流感觉。那种思维连续不断，思考效率一路狂飙的感觉真是爽爆了（当然这么做的副作用就是失眠）。</p>

<p>这是一个好的开始。如果这种状态能延续到阅读和吃零食中，那就更好了。</p>

<h2>遗憾</h2>

<p>最大的遗憾是：对于 iPhone App 而言，现在入场已经太晚了。但我们还有 iWatch，虽然它暂时不开放 SDK。</p>

<p>其他的遗憾有：</p>

<ul>
<li>由于偷懒，很多地方的代码结构都不是很好，有些实现方法很脏，需要找机会重构一遍；</li>
<li>这个 App 在技术上完全没有难度，无论是 Core Animation，还是 Core Data 的进阶用法，我都还没涉及到；</li>
<li>虽然我写了一些代码让界面能够自适应，但马上大屏 iPhone 就要发布了，而这个 App 目前来看，还不能在大屏 iPhone 上得到最好效果；</li>
<li>由于偷懒，这个版本没有写 About 页面，也没有加入 App Store 评分提醒，没有加入任何收集用户数据的代码，也没有提供一个撰写用户反馈的入口。</li>
</ul>


<p>最后感谢虾神 @txx 的支持和指导，在他那里我得到了很多建议、工具推荐和最佳实践。</p>
]]></content>
  </entry>
  
</feed>
